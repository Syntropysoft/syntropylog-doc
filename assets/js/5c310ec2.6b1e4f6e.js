"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[637],{946:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"examples/testing-overview","title":"Testing Overview","description":"Comprehensive guide to testing with SyntropyLog","source":"@site/docs/examples/testing-overview.md","sourceDirName":"examples","slug":"/examples/testing-overview","permalink":"/syntropylog-doc/docs/examples/testing-overview","draft":false,"unlisted":false,"editUrl":"https://github.com/Syntropysoft/SyntropyLog/tree/main/docs-docusaurus/docs/examples/testing-overview.md","tags":[],"version":"current","frontMatter":{"id":"testing-overview","title":"Testing Overview","sidebar_label":"Testing Overview","description":"Comprehensive guide to testing with SyntropyLog"},"sidebar":"tutorialSidebar","previous":{"title":"Testing Transport Concepts","permalink":"/syntropylog-doc/docs/examples/testing-transports-concepts"},"next":{"title":"Getting Started","permalink":"/syntropylog-doc/docs/getting-started"}}');var r=s(4848),i=s(8453);const o={id:"testing-overview",title:"Testing Overview",sidebar_label:"Testing Overview",description:"Comprehensive guide to testing with SyntropyLog"},l="Testing with SyntropyLog",c={},a=[{value:"Philosophy",id:"philosophy",level:2},{value:"<strong>Silent Observer Principle</strong>",id:"silent-observer-principle",level:3},{value:"<strong>Zero Boilerplate Testing</strong>",id:"zero-boilerplate-testing",level:3},{value:"Framework Agnostic Mocks",id:"framework-agnostic-mocks",level:2},{value:"<strong>Available Mocks</strong>",id:"available-mocks",level:3},{value:"<strong>Spy Function Injection</strong>",id:"spy-function-injection",level:3},{value:"<strong>Epic Error Messages</strong>",id:"epic-error-messages",level:3},{value:"Testing Patterns",id:"testing-patterns",level:2},{value:"<strong>1. Framework Agnostic Testing</strong>",id:"1-framework-agnostic-testing",level:3},{value:"<strong>2. Declarative Testing</strong>",id:"2-declarative-testing",level:3},{value:"<strong>3. Boilerplate Testing</strong>",id:"3-boilerplate-testing",level:3},{value:"<strong>4. Zero External Dependencies</strong>",id:"4-zero-external-dependencies",level:3},{value:"Test Coverage",id:"test-coverage",level:2},{value:"Bundle Size Optimization",id:"bundle-size-optimization",level:2},{value:"Examples",id:"examples",level:2},{value:"<strong>Complete Testing Examples</strong>",id:"complete-testing-examples",level:3},{value:"<strong>Key Benefits</strong>",id:"key-benefits",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"<strong>1. Use Framework Agnostic Mocks</strong>",id:"1-use-framework-agnostic-mocks",level:3},{value:"<strong>2. Test Behavior, Not Implementation</strong>",id:"2-test-behavior-not-implementation",level:3},{value:"<strong>3. Use Declarative Patterns</strong>",id:"3-use-declarative-patterns",level:3},{value:"<strong>4. Test Framework Boilerplate</strong>",id:"4-test-framework-boilerplate",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"testing-with-syntropylog",children:"Testing with SyntropyLog"})}),"\n",(0,r.jsx)(n.p,{children:"SyntropyLog provides a comprehensive testing framework that makes testing observability code simple, fast, and reliable."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\ud83d\udce6 Version"}),": This documentation corresponds to ",(0,r.jsx)(n.strong,{children:"SyntropyLog v0.7.0"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"philosophy",children:"Philosophy"}),"\n",(0,r.jsx)(n.h3,{id:"silent-observer-principle",children:(0,r.jsx)(n.strong,{children:"Silent Observer Principle"})}),"\n",(0,r.jsxs)(n.p,{children:['SyntropyLog follows the "Silent Observer" principle - ',(0,r.jsx)(n.strong,{children:"we report what happened and nothing more"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Your application continues running, even if logging fails\ntry {\n  const result = await database.query('SELECT * FROM users');\n  logger.info('Query successful', { count: result.length });\n} catch (error) {\n  // Your error handling continues normally\n  logger.error('Database error', { error: error.message });\n  // Application logic continues...\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"zero-boilerplate-testing",children:(0,r.jsx)(n.strong,{children:"Zero Boilerplate Testing"})}),"\n",(0,r.jsx)(n.p,{children:"Testing should be simple and focused on behavior, not framework setup:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { createTestHelper } from 'syntropylog/testing';\n\n// No initialization, no shutdown, no external dependencies\nconst testHelper = createTestHelper(vi.fn);\n\ndescribe('UserService', () => {\n  beforeEach(() => {\n    testHelper.beforeEach(); // Reset mocks\n  });\n\n  it('should create user successfully', async () => {\n    const result = await userService.createUser({ name: 'John' });\n    expect(result).toHaveProperty('userId');\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"framework-agnostic-mocks",children:"Framework Agnostic Mocks"}),"\n",(0,r.jsxs)(n.p,{children:["All mocks work with any testing framework through ",(0,r.jsx)(n.strong,{children:"spy function injection"}),":"]}),"\n",(0,r.jsx)(n.h3,{id:"available-mocks",children:(0,r.jsx)(n.strong,{children:"Available Mocks"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"SyntropyLogMock"})})," - Complete framework simulation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"BeaconRedisMock"})})," - Full Redis simulation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"MockHttpClient"})})," - HTTP client simulation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"MockBrokerAdapter"})})," - Message broker simulation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"MockSerializerRegistry"})})," - Serialization simulation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"SpyTransport"})})," - Log capture for testing"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"spy-function-injection",children:(0,r.jsx)(n.strong,{children:"Spy Function Injection"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Vitest\nconst mockRedis = new BeaconRedisMock(vi.fn);\n\n// Jest\nconst mockRedis = new BeaconRedisMock(jest.fn);\n\n// Jasmine\nconst mockRedis = new BeaconRedisMock(jasmine.createSpy);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"epic-error-messages",children:(0,r.jsx)(n.strong,{children:"Epic Error Messages"})}),"\n",(0,r.jsx)(n.p,{children:"If you forget to inject a spy function:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// \u274c This will throw: "SPY FUNCTION NOT INJECTED!"\nconst mockRedis = new BeaconRedisMock();\n\n// \u2705 This works perfectly\nconst mockRedis = new BeaconRedisMock(vi.fn);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"testing-patterns",children:"Testing Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"1-framework-agnostic-testing",children:(0,r.jsx)(n.strong,{children:"1. Framework Agnostic Testing"})}),"\n",(0,r.jsx)(n.p,{children:"All mocks work with any testing framework:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Works with Vitest, Jest, Jasmine, or any framework\nconst testHelper = createTestHelper(vi.fn);\nconst mockRedis = new BeaconRedisMock(vi.fn);\nconst mockHttp = new MockHttpClient(vi.fn);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-declarative-testing",children:(0,r.jsx)(n.strong,{children:"2. Declarative Testing"})}),"\n",(0,r.jsx)(n.p,{children:"Focus on behavior and outcomes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"it('should create user and log success', async () => {\n  const user = { name: 'John', email: 'john@example.com' };\n  \n  const result = await userService.createUser(user);\n  \n  // Assert the outcome\n  expect(result).toHaveProperty('userId');\n  expect(mockTransport.getEntries()).toContainEqual(\n    expect.objectContaining({\n      level: 'info',\n      message: 'User created successfully',\n      userId: result.userId\n    })\n  );\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-boilerplate-testing",children:(0,r.jsx)(n.strong,{children:"3. Boilerplate Testing"})}),"\n",(0,r.jsx)(n.p,{children:"Test framework initialization and shutdown:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"it('should initialize framework correctly', async () => {\n  const result = await initializeSyntropyLog();\n  expect(result).toBeDefined();\n  expect(result.getLogger).toBeDefined();\n});\n\nit('should handle graceful shutdown', async () => {\n  const result = await gracefulShutdown();\n  expect(result).toEqual({ success: true });\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-zero-external-dependencies",children:(0,r.jsx)(n.strong,{children:"4. Zero External Dependencies"})}),"\n",(0,r.jsx)(n.p,{children:"No Redis, HTTP servers, or external services needed:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Everything runs in memory\nconst mockRedis = new BeaconRedisMock(vi.fn);\nconst mockHttp = new MockHttpClient(vi.fn);\nconst mockBroker = new MockBrokerAdapter(vi.fn);\n\n// Configure mock behavior\nmockRedis.set('user:123', userData);\nmockHttp.setResponse('/api/users', { data: users });\nmockBroker.setError('user.created', new Error('Broker error'));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"test-coverage",children:"Test Coverage"}),"\n",(0,r.jsxs)(n.p,{children:["All examples achieve ",(0,r.jsx)(n.strong,{children:"90%+ test coverage"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Tests:       25 passed, 25 total\nSnapshots:   0 total\nTime:        3.2s\n\n----------|---------|----------|---------|---------|-------------------\nFile      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n----------|---------|----------|---------|---------|-------------------\nAll files |    92.5 |     86.2 |    90.2 |    92.5 |                   \n----------|---------|----------|---------|---------|-------------------\n"})}),"\n",(0,r.jsx)(n.h2,{id:"bundle-size-optimization",children:"Bundle Size Optimization"}),"\n",(0,r.jsxs)(n.p,{children:["Testing mocks are ",(0,r.jsx)(n.strong,{children:"separated from the main bundle"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Main bundle"}),": 161K (production code only)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testing bundle"}),": 40K (mocks only when imported)"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Production code - no testing overhead\nimport { syntropyLog } from 'syntropylog';\n\n// Testing code - only when needed\nimport { createTestHelper } from 'syntropylog/testing';\n"})}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"complete-testing-examples",children:(0,r.jsx)(n.strong,{children:"Complete Testing Examples"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"./testing-patterns-vitest",children:"Example 28: Vitest Testing"})})," - Basic testing patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"./testing-patterns-jest",children:"Example 29: Jest Testing"})})," - Jest-specific patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"./testing-redis-context",children:"Example 30: Redis Context"})})," - Redis testing patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"./testing-serializers",children:"Example 31: Serializers Testing"})})," - Serializer testing patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"./testing-transports-concepts",children:"Example 32: Transport Concepts"})})," - Transport testing concepts"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"key-benefits",children:(0,r.jsx)(n.strong,{children:"Key Benefits"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud83d\udeab No Connection Boilerplate"})," - No init/shutdown in tests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\u26a1 Lightning Fast"})," - Everything runs in memory"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud83d\udd12 Reliable"})," - No network issues or state conflicts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud83c\udfaf Focused"})," - Test business logic, not framework internals"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud83d\udd04 Framework Agnostic"})," - Works with any test runner"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-use-framework-agnostic-mocks",children:(0,r.jsx)(n.strong,{children:"1. Use Framework Agnostic Mocks"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Works with any framework\nconst mockRedis = new BeaconRedisMock(vi.fn);\n\n// \u274c Bad - Framework specific\nconst mockRedis = vi.fn();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-test-behavior-not-implementation",children:(0,r.jsx)(n.strong,{children:"2. Test Behavior, Not Implementation"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Test the outcome\nexpect(result).toHaveProperty('userId');\nexpect(mockTransport.getEntries()).toContainEqual(\n  expect.objectContaining({ message: 'User created' })\n);\n\n// \u274c Bad - Test implementation details\nexpect(mockRedis.set).toHaveBeenCalledWith('user:123', userData);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-use-declarative-patterns",children:(0,r.jsx)(n.strong,{children:"3. Use Declarative Patterns"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Clear and readable\nit('should send welcome email when user is created', async () => {\n  const user = { name: 'John', email: 'john@example.com' };\n  await userService.createUser(user);\n  \n  expect(mockTransport.getEntries()).toContainEqual(\n    expect.objectContaining({\n      level: 'info',\n      message: 'Welcome email sent',\n      email: 'john@example.com'\n    })\n  );\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-test-framework-boilerplate",children:(0,r.jsx)(n.strong,{children:"4. Test Framework Boilerplate"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Test initialization and shutdown\nit('should initialize framework correctly', async () => {\n  const result = await initializeSyntropyLog();\n  expect(result).toBeDefined();\n});\n\nit('should handle graceful shutdown', async () => {\n  const result = await gracefulShutdown();\n  expect(result).toEqual({ success: true });\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"../getting-started",children:"Getting Started"})})," - Complete setup guide"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"../configuration",children:"Configuration Guide"})})," - Configuration options"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"../api-reference",children:"API Reference"})})," - Full API documentation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"../production",children:"Production Guide"})})," - Production deployment"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(6540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);