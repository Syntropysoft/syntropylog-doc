"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[51],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(6540);const r={},a=s.createContext(r);function o(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:n},e.children)}},9749:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"core-concepts/http-instrumentation","title":"HTTP Instrumentation","description":"SyntropyLog\'s HTTP instrumentation provides automatic request/response logging, context propagation, and correlation across HTTP calls.","source":"@site/docs/core-concepts/http-instrumentation.md","sourceDirName":"core-concepts","slug":"/core-concepts/http-instrumentation","permalink":"/syntropylog-doc/docs/core-concepts/http-instrumentation","draft":false,"unlisted":false,"editUrl":"https://github.com/Syntropysoft/SyntropyLog/tree/main/docs-docusaurus/docs/core-concepts/http-instrumentation.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Context Management","permalink":"/syntropylog-doc/docs/core-concepts/context"},"next":{"title":"Examples","permalink":"/syntropylog-doc/docs/examples/"}}');var r=t(4848),a=t(8453);const o={sidebar_position:3},i="HTTP Instrumentation",l={},c=[{value:"\ud83c\udfaf Overview",id:"-overview",level:2},{value:"\ud83d\ude80 Basic Usage",id:"-basic-usage",level:2},{value:"\ud83c\udfd7\ufe0f Singleton Pattern",id:"\ufe0f-singleton-pattern",level:2},{value:"\ud83d\udd17 Context Propagation",id:"-context-propagation",level:2},{value:"\ud83d\udcca Automatic Logging",id:"-automatic-logging",level:2},{value:"\ud83c\udfa8 Multiple HTTP Clients",id:"-multiple-http-clients",level:2},{value:"\ud83d\udd27 Adapter Pattern",id:"-adapter-pattern",level:2},{value:"Axios Adapter",id:"axios-adapter",level:3},{value:"Fetch Adapter",id:"fetch-adapter",level:3},{value:"Custom Adapter",id:"custom-adapter",level:3},{value:"\ud83c\udfaf Logging Configuration",id:"-logging-configuration",level:2},{value:"\ud83d\udd12 Security Features",id:"-security-features",level:2},{value:"Header Redaction",id:"header-redaction",level:3},{value:"Body Masking",id:"body-masking",level:3},{value:"\u26a1 Performance Monitoring",id:"-performance-monitoring",level:2},{value:"\ud83c\udfaf Error Handling",id:"-error-handling",level:2},{value:"\ud83d\udd27 Configuration Options",id:"-configuration-options",level:2},{value:"\ud83c\udfaf Best Practices",id:"-best-practices",level:2},{value:"\ud83d\udd0d Debugging HTTP Calls",id:"-debugging-http-calls",level:2},{value:"\u26a1 Performance Considerations",id:"-performance-considerations",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"http-instrumentation",children:"HTTP Instrumentation"})}),"\n",(0,r.jsx)(n.p,{children:"SyntropyLog's HTTP instrumentation provides automatic request/response logging, context propagation, and correlation across HTTP calls."}),"\n",(0,r.jsx)(n.h2,{id:"-overview",children:"\ud83c\udfaf Overview"}),"\n",(0,r.jsx)(n.p,{children:"HTTP instrumentation enables:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Automatic logging"})," - Request/response details logged automatically"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Context propagation"})," - Correlation IDs and context flow through headers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Framework agnostic"})," - Works with any HTTP client via adapters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance monitoring"})," - Request duration and status tracking"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-basic-usage",children:"\ud83d\ude80 Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { syntropyLog } from 'syntropylog';\nimport { AxiosAdapter } from '@syntropylog/adapters';\nimport axios from 'axios';\n\n// Initialize with HTTP configuration\nawait syntropyLog.init({\n  http: {\n    instances: [\n      {\n        instanceName: 'api',\n        adapter: new AxiosAdapter(axios.create({ \n          baseURL: 'https://api.example.com' \n        })),\n      },\n    ],\n  },\n});\n\n// Use the instrumented client\nconst httpClient = syntropyLog.getHttp('api');\nconst response = await httpClient.request({\n  method: 'GET',\n  url: '/users',\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-singleton-pattern",children:"\ud83c\udfd7\ufe0f Singleton Pattern"}),"\n",(0,r.jsx)(n.p,{children:"HTTP clients use singleton pattern for efficient resource management:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// First call - creates and returns new instance\nconst client1 = syntropyLog.getHttp('api');\n\n// Second call - returns the SAME instance (singleton)\nconst client2 = syntropyLog.getHttp('api');\n\n// client1 === client2 \u2705\n// Same connection pool and configuration\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-context-propagation",children:"\ud83d\udd17 Context Propagation"}),"\n",(0,r.jsx)(n.p,{children:"Context automatically propagates through HTTP headers:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"await syntropyLog.init({\n  http: {\n    instances: [\n      {\n        instanceName: 'api',\n        adapter: new AxiosAdapter(axios.create()),\n        propagate: ['correlationId', 'userId', 'tenantId'],\n      },\n    ],\n  },\n});\n\n// Set context data\nconst contextManager = syntropyLog.getContextManager();\ncontextManager.set('userId', 123);\ncontextManager.set('tenantId', 'tenant-1');\n\n// Context is automatically added to headers\nconst httpClient = syntropyLog.getHttp('api');\nawait httpClient.request({\n  method: 'GET',\n  url: '/api/users',\n  // Headers automatically include:\n  // X-Correlation-ID: abc-123-def-456\n  // X-User-ID: 123\n  // X-Tenant-ID: tenant-1\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-automatic-logging",children:"\ud83d\udcca Automatic Logging"}),"\n",(0,r.jsx)(n.p,{children:"HTTP operations are automatically logged with context:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"await syntropyLog.init({\n  http: {\n    instances: [\n      {\n        instanceName: 'api',\n        adapter: new AxiosAdapter(axios.create()),\n        logging: {\n          onRequest: 'info',\n          onSuccess: 'debug',\n          onError: 'error',\n          logRequestHeaders: false,\n          logRequestBody: true,\n          logResponseHeaders: false,\n          logResponseBody: false,\n        },\n      },\n    ],\n  },\n});\n\n// All HTTP operations are automatically logged\nconst httpClient = syntropyLog.getHttp('api');\n\n// This will log: \"HTTP Request: GET /api/users\"\nawait httpClient.get('/api/users');\n\n// This will log: \"HTTP Response: 200 OK\" (at debug level)\n// This will log: \"HTTP Error: 500 Internal Server Error\" (at error level)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-multiple-http-clients",children:"\ud83c\udfa8 Multiple HTTP Clients"}),"\n",(0,r.jsx)(n.p,{children:"Configure multiple HTTP clients for different services:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"await syntropyLog.init({\n  http: {\n    instances: [\n      {\n        instanceName: 'userApi',\n        adapter: new AxiosAdapter(axios.create({ \n          baseURL: 'https://api.users.com' \n        })),\n        propagate: ['correlationId', 'userId'],\n        logging: {\n          onSuccess: 'debug',\n          onError: 'error',\n        },\n      },\n      {\n        instanceName: 'paymentApi',\n        adapter: new AxiosAdapter(axios.create({ \n          baseURL: 'https://api.payments.com' \n        })),\n        propagate: ['correlationId', 'paymentId'],\n        logging: {\n          onSuccess: 'info', // More verbose for payments\n          onError: 'warn',\n          logResponseBody: true, // Log payment responses\n        },\n      },\n    ],\n    default: 'userApi', // Default instance\n  },\n});\n\n// Use different clients\nconst userClient = syntropyLog.getHttp('userApi');\nconst paymentClient = syntropyLog.getHttp('paymentApi');\n\nawait userClient.get('/users/123');\nawait paymentClient.post('/payments', paymentData);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-adapter-pattern",children:"\ud83d\udd27 Adapter Pattern"}),"\n",(0,r.jsx)(n.p,{children:"SyntropyLog uses adapters to support any HTTP client:"}),"\n",(0,r.jsx)(n.h3,{id:"axios-adapter",children:"Axios Adapter"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { AxiosAdapter } from '@syntropylog/adapters';\nimport axios from 'axios';\n\nconst axiosInstance = axios.create({\n  baseURL: 'https://api.example.com',\n  timeout: 5000,\n});\n\nconst adapter = new AxiosAdapter(axiosInstance);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"fetch-adapter",children:"Fetch Adapter"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { FetchAdapter } from '@syntropylog/adapters';\n\nconst adapter = new FetchAdapter();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-adapter",children:"Custom Adapter"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { IHttpAdapter } from 'syntropylog';\n\nclass CustomHttpAdapter implements IHttpAdapter {\n  async request(config: any) {\n    // Your custom HTTP client implementation\n    return response;\n  }\n}\n\nconst adapter = new CustomHttpAdapter();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-logging-configuration",children:"\ud83c\udfaf Logging Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Fine-tune what gets logged for each HTTP operation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"await syntropyLog.init({\n  http: {\n    instances: [\n      {\n        instanceName: 'api',\n        adapter: new AxiosAdapter(axios.create()),\n        logging: {\n          onRequest: 'info',      // Log when request starts\n          onSuccess: 'debug',     // Log successful responses\n          onError: 'error',       // Log errors\n          logRequestHeaders: false,  // Don't log request headers\n          logRequestBody: true,      // Log request body\n          logResponseHeaders: false, // Don't log response headers\n          logResponseBody: false,    // Don't log response body\n          logDuration: true,         // Log request duration\n        },\n      },\n    ],\n  },\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-security-features",children:"\ud83d\udd12 Security Features"}),"\n",(0,r.jsx)(n.h3,{id:"header-redaction",children:"Header Redaction"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"await syntropyLog.init({\n  http: {\n    instances: [\n      {\n        instanceName: 'api',\n        adapter: new AxiosAdapter(axios.create()),\n        logging: {\n          redactHeaders: ['authorization', 'cookie', 'x-api-key'],\n          logRequestHeaders: true,\n        },\n      },\n    ],\n  },\n});\n\n// Sensitive headers are automatically redacted in logs\nawait httpClient.request({\n  headers: {\n    'Authorization': 'Bearer secret-token', // Will show as \"***\"\n    'Content-Type': 'application/json',     // Will show normally\n  },\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"body-masking",children:"Body Masking"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"await syntropyLog.init({\n  masking: {\n    fields: ['password', 'token', 'creditCard'],\n  },\n  http: {\n    instances: [\n      {\n        instanceName: 'api',\n        adapter: new AxiosAdapter(axios.create()),\n        logging: {\n          logRequestBody: true,\n        },\n      },\n    ],\n  },\n});\n\n// Sensitive data in request body is automatically masked\nawait httpClient.post('/users', {\n  email: 'user@example.com',\n  password: 'secret123', // Will show as \"***\"\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-performance-monitoring",children:"\u26a1 Performance Monitoring"}),"\n",(0,r.jsx)(n.p,{children:"Track HTTP performance automatically:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"await syntropyLog.init({\n  http: {\n    instances: [\n      {\n        instanceName: 'api',\n        adapter: new AxiosAdapter(axios.create()),\n        logging: {\n          logDuration: true,\n          logStatusCodes: true,\n        },\n      },\n    ],\n  },\n});\n\n// Performance metrics are automatically logged\nconst startTime = Date.now();\nawait httpClient.get('/api/users');\n// Logs: \"HTTP Response: 200 OK (45ms)\"\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-error-handling",children:"\ud83c\udfaf Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"HTTP errors are automatically logged with context:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"try {\n  await httpClient.get('/api/users');\n} catch (error) {\n  // Error is automatically logged with:\n  // - Request details (method, URL, headers)\n  // - Response details (status, body)\n  // - Duration\n  // - Full context (correlation ID, etc.)\n  \n  // You can also log additional context\n  logger.error({ err: error }, 'API call failed', {\n    operation: 'fetch_users',\n    retryCount: 3,\n  });\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-configuration-options",children:"\ud83d\udd27 Configuration Options"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"await syntropyLog.init({\n  http: {\n    instances: [\n      {\n        instanceName: 'api',\n        adapter: new AxiosAdapter(axios.create()),\n        isDefault: true,\n        propagate: ['correlationId', 'userId', 'tenantId'],\n        logging: {\n          onRequest: 'info',\n          onSuccess: 'debug',\n          onError: 'error',\n          logRequestHeaders: false,\n          logRequestBody: true,\n          logResponseHeaders: false,\n          logResponseBody: false,\n          logDuration: true,\n          redactHeaders: ['authorization'],\n        },\n        timeout: 5000,\n        retries: 3,\n      },\n    ],\n    default: 'api',\n  },\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-best-practices",children:"\ud83c\udfaf Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use meaningful instance names"})," - Choose descriptive names for different APIs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configure appropriate logging levels"})," - Don't log everything at the same level"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Redact sensitive headers"})," - Always redact authorization and API keys"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use context propagation"})," - Enable correlation for distributed tracing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitor performance"})," - Enable duration logging for performance tracking"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handle errors gracefully"})," - Use try-catch blocks for error handling"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use adapters"})," - Leverage the adapter pattern for framework agnosticism"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-debugging-http-calls",children:"\ud83d\udd0d Debugging HTTP Calls"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Enable verbose logging for debugging\nawait syntropyLog.init({\n  http: {\n    instances: [\n      {\n        instanceName: 'api',\n        adapter: new AxiosAdapter(axios.create()),\n        logging: {\n          onRequest: 'debug',\n          onSuccess: 'debug',\n          onError: 'debug',\n          logRequestHeaders: true,\n          logRequestBody: true,\n          logResponseHeaders: true,\n          logResponseBody: true,\n        },\n      },\n    ],\n  },\n});\n\n// All HTTP operations will be logged in detail\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-performance-considerations",children:"\u26a1 Performance Considerations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Minimal overhead"})," - HTTP instrumentation adds less than 1ms per request"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Connection pooling"})," - Adapters reuse connections when possible"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Async operations"})," - All HTTP calls are non-blocking"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory efficient"})," - Singleton pattern prevents connection leaks"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);