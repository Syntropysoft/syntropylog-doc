"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[550],{2371:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"core-concepts/logger","title":"Logger","description":"The SyntropyLog logger is the core component that provides structured logging with automatic context propagation and correlation.","source":"@site/docs/core-concepts/logger.md","sourceDirName":"core-concepts","slug":"/core-concepts/logger","permalink":"/syntropylog-doc/docs/core-concepts/logger","draft":false,"unlisted":false,"editUrl":"https://github.com/Syntropysoft/SyntropyLog/tree/main/docs-docusaurus/docs/core-concepts/logger.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Configuration","permalink":"/syntropylog-doc/docs/configuration/"},"next":{"title":"Context Management","permalink":"/syntropylog-doc/docs/core-concepts/context"}}');var o=r(4848),i=r(8453);const s={sidebar_position:1},a="Logger",l={},c=[{value:"\ud83c\udfaf Overview",id:"-overview",level:2},{value:"\ud83d\ude80 Basic Usage",id:"-basic-usage",level:2},{value:"\ud83c\udfd7\ufe0f Singleton Pattern",id:"\ufe0f-singleton-pattern",level:2},{value:"\ud83d\udcca Log Levels",id:"-log-levels",level:2},{value:"\ud83c\udfa8 Transports",id:"-transports",level:2},{value:"Pretty Console Transport (Development)",id:"pretty-console-transport-development",level:3},{value:"Classic Console Transport (Production)",id:"classic-console-transport-production",level:3},{value:"Multiple Transports",id:"multiple-transports",level:3},{value:"\ud83e\udde0 Smart Context Logging with LoggingMatrix",id:"-smart-context-logging-with-loggingmatrix",level:2},{value:"How LoggingMatrix Works",id:"how-loggingmatrix-works",level:3},{value:"Key Benefits",id:"key-benefits",level:3},{value:"Practical Examples",id:"practical-examples",level:3},{value:"Runtime Configuration",id:"runtime-configuration",level:3},{value:"\ud83d\udd12 Data Masking",id:"-data-masking",level:2},{value:"\ud83c\udfaf Advanced Features",id:"-advanced-features",level:2},{value:"Fluent API",id:"fluent-api",level:3},{value:"Error Logging",id:"error-logging",level:3},{value:"Structured Data",id:"structured-data",level:3},{value:"\u26a1 Performance Considerations",id:"-performance-considerations",level:2},{value:"\ud83d\udd27 Configuration Options",id:"-configuration-options",level:2},{value:"\ud83c\udfaf Best Practices",id:"-best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"logger",children:"Logger"})}),"\n",(0,o.jsx)(n.p,{children:"The SyntropyLog logger is the core component that provides structured logging with automatic context propagation and correlation."}),"\n",(0,o.jsx)(n.h2,{id:"-overview",children:"\ud83c\udfaf Overview"}),"\n",(0,o.jsx)(n.p,{children:"SyntropyLog's logger is designed to be:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Context-aware"})," - Automatically includes correlation IDs and context"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Framework-agnostic"})," - Works with any Node.js application"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Performance-optimized"})," - Minimal overhead with intelligent log scoping"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Production-ready"})," - Multiple transport support and structured output"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-basic-usage",children:"\ud83d\ude80 Basic Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { syntropyLog } from 'syntropylog';\n\n// Initialize SyntropyLog\nawait syntropyLog.init({\n  logger: {\n    serviceName: 'my-app',\n    level: 'info',\n  },\n});\n\n// Get logger instance\nconst logger = syntropyLog.getLogger();\n\n// Basic logging\nlogger.info('Application started');\nlogger.warn('Configuration not found, using defaults');\nlogger.error('Database connection failed', { \n  error: 'Connection timeout',\n  retryCount: 3 \n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-singleton-pattern",children:"\ud83c\udfd7\ufe0f Singleton Pattern"}),"\n",(0,o.jsx)(n.p,{children:"SyntropyLog uses a singleton pattern for logger instances to prevent memory leaks and ensure consistency:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// First call - creates and returns new instance\nconst logger1 = syntropyLog.getLogger('user-service');\n\n// Second call - returns the SAME instance (singleton)\nconst logger2 = syntropyLog.getLogger('user-service');\n\n// logger1 === logger2 \u2705\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-log-levels",children:"\ud83d\udcca Log Levels"}),"\n",(0,o.jsx)(n.p,{children:"SyntropyLog supports standard log levels with intelligent context inclusion:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"logger.trace('Detailed debugging information');\nlogger.debug('Debug information for development');\nlogger.info('General information about application flow');\nlogger.warn('Warning messages for potentially harmful situations');\nlogger.error('Error events that might still allow the application to continue');\nlogger.fatal('Severe error events that will prevent the application from running');\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-transports",children:"\ud83c\udfa8 Transports"}),"\n",(0,o.jsx)(n.p,{children:"SyntropyLog supports multiple transport types for different environments:"}),"\n",(0,o.jsx)(n.h3,{id:"pretty-console-transport-development",children:"Pretty Console Transport (Development)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { PrettyConsoleTransport } from 'syntropylog';\n\nawait syntropyLog.init({\n  logger: {\n    transports: [new PrettyConsoleTransport()],\n  },\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"classic-console-transport-production",children:"Classic Console Transport (Production)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { ClassicConsoleTransport } from 'syntropylog';\n\nawait syntropyLog.init({\n  logger: {\n    transports: [new ClassicConsoleTransport()],\n  },\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"multiple-transports",children:"Multiple Transports"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"await syntropyLog.init({\n  logger: {\n    transports: [\n      new PrettyConsoleTransport(), // Development\n      new ClassicConsoleTransport(), // Production JSON\n      // Custom transports for external services\n    ],\n  },\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-smart-context-logging-with-loggingmatrix",children:"\ud83e\udde0 Smart Context Logging with LoggingMatrix"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"loggingMatrix"})," is an intermediary layer that acts as a filter between your context data and the logger. It determines which context fields are included in each log level, providing fine-grained control over what gets logged without affecting security or performance."]}),"\n",(0,o.jsx)(n.h3,{id:"how-loggingmatrix-works",children:"How LoggingMatrix Works"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"await syntropyLog.init({\n  loggingMatrix: {\n    default: ['correlationId'], // Minimal context for success logs\n    trace: ['*'], // Full context for debugging\n    debug: ['correlationId', 'userId', 'operation'],\n    info: ['correlationId', 'serviceName'],\n    warn: ['correlationId', 'userId', 'errorCode'],\n    error: ['*'], // Full context when things go wrong\n    fatal: ['*'], // Everything for critical failures\n  },\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Selective Context"}),": Only include relevant context fields per log level"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Wildcard Support"}),": Use ",(0,o.jsx)(n.code,{children:"'*'"})," to include ALL context fields when needed"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Hot Reload"}),": Modify the matrix at runtime without restarting"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Security Preserved"}),": All masking and sanitization rules still apply"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Performance Optimized"}),": Only serializes what's needed for each level"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Set various context data\nconst contextManager = syntropyLog.getContextManager();\ncontextManager.set('userId', 123);\ncontextManager.set('serviceName', 'user-service');\ncontextManager.set('operation', 'create-user');\ncontextManager.set('tenantId', 'tenant-1');\ncontextManager.set('sessionId', 'sess-789');\ncontextManager.set('requestId', 'req-456');\n\n// With loggingMatrix: { info: ['correlationId', 'serviceName'] }\nlogger.info('User created successfully');\n// Output: { correlationId: 'abc-123', serviceName: 'user-service', message: 'User created successfully' }\n// Only correlationId and serviceName are included\n\n// With loggingMatrix: { error: ['*'] }\nlogger.error('Database connection failed');\n// Output: { correlationId: 'abc-123', userId: 123, serviceName: 'user-service', operation: 'create-user', tenantId: 'tenant-1', sessionId: 'sess-789', requestId: 'req-456', message: 'Database connection failed' }\n// ALL context fields are included for debugging\n"})}),"\n",(0,o.jsx)(n.h3,{id:"runtime-configuration",children:"Runtime Configuration"}),"\n",(0,o.jsx)(n.p,{children:"You can modify the loggingMatrix dynamically:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Add more context to info logs during debugging\nsyntropyLog.updateLoggingMatrix({\n  info: ['correlationId', 'serviceName', 'userId', 'operation'],\n});\n\n// Reduce context in error logs for production\nsyntropyLog.updateLoggingMatrix({\n  error: ['correlationId', 'userId', 'errorCode'],\n});\n\n// Changes take effect immediately\nlogger.info('Operation completed'); // Now includes userId and operation\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-data-masking",children:"\ud83d\udd12 Data Masking"}),"\n",(0,o.jsx)(n.p,{children:"SyntropyLog automatically masks sensitive data:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"await syntropyLog.init({\n  masking: {\n    fields: ['password', 'token', 'creditCard', 'ssn'],\n    replacement: '***',\n  },\n});\n\n// Sensitive data is automatically masked\nlogger.info('User created', {\n  userId: 123,\n  email: 'user@example.com',\n  password: 'secret123', // Will show as \"***\"\n  creditCard: '1234-5678-9012-3456' // Will show as \"***\"\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-advanced-features",children:"\ud83c\udfaf Advanced Features"}),"\n",(0,o.jsx)(n.h3,{id:"fluent-api",children:"Fluent API"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"logger\n  .withSource('auth-controller')\n  .withTransactionId('tx-12345')\n  .info('User authentication completed', { \n    userId: 123, \n    method: 'oauth2',\n    provider: 'google' \n  });\n"})}),"\n",(0,o.jsx)(n.h3,{id:"error-logging",children:"Error Logging"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"try {\n  await someOperation();\n} catch (error) {\n  logger.error({ err: error }, 'Operation failed', {\n    operation: 'database_query',\n    duration: 1500,\n  });\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"structured-data",children:"Structured Data"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"logger.info('API Request', {\n  method: 'GET',\n  url: '/api/users',\n  statusCode: 200,\n  duration: 45,\n  userAgent: 'Mozilla/5.0...',\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-performance-considerations",children:"\u26a1 Performance Considerations"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Minimal overhead"})," - Less than 1ms per log operation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Intelligent serialization"})," - Only serialize what's needed"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Async operations"})," - Non-blocking logging"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Memory efficient"})," - Singleton pattern prevents leaks"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-configuration-options",children:"\ud83d\udd27 Configuration Options"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"await syntropyLog.init({\n  logger: {\n    name: 'my-custom-logger',\n    level: 'info', // 'fatal' | 'error' | 'warn' | 'info' | 'debug' | 'trace' | 'silent'\n    serviceName: 'my-enterprise-app',\n    serviceVersion: '1.0.0',\n    environment: 'production',\n    transports: [new ClassicConsoleTransport()],\n    serializerTimeoutMs: 50, // Prevent slow serializers from blocking\n    prettyPrint: {\n      enabled: process.env.NODE_ENV !== 'production',\n    },\n  },\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-best-practices",children:"\ud83c\udfaf Best Practices"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Use appropriate log levels"})," - Don't log everything at the same level"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Include relevant context"})," - Add useful information for debugging"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Structure your data"})," - Use objects for structured logging"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Mask sensitive data"})," - Always configure data masking"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Use correlation IDs"})," - Enable automatic correlation for distributed tracing"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Choose the right transports"})," - Different transports for different environments"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(6540);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);