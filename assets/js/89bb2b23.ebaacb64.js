"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[203],{6867:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"core-concepts/context","title":"Context Management","description":"SyntropyLog\'s context management system provides automatic correlation and context propagation across your entire application.","source":"@site/docs/core-concepts/context.md","sourceDirName":"core-concepts","slug":"/core-concepts/context","permalink":"/syntropylog-doc/docs/core-concepts/context","draft":false,"unlisted":false,"editUrl":"https://github.com/Syntropysoft/SyntropyLog/tree/main/docs-docusaurus/docs/core-concepts/context.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Logger","permalink":"/syntropylog-doc/docs/core-concepts/logger"},"next":{"title":"HTTP Instrumentation","permalink":"/syntropylog-doc/docs/core-concepts/http-instrumentation"}}');var r=t(4848),a=t(8453);const s={sidebar_position:2},i="Context Management",c={},l=[{value:"\ud83c\udfaf Overview",id:"-overview",level:2},{value:"\ud83d\ude80 Basic Usage",id:"-basic-usage",level:2},{value:"\ud83d\udd17 Automatic Correlation",id:"-automatic-correlation",level:2},{value:"\ud83c\udf10 HTTP Context Propagation",id:"-http-context-propagation",level:2},{value:"\ud83d\udce1 Message Broker Context Propagation",id:"-message-broker-context-propagation",level:2},{value:"\ud83d\uddc4\ufe0f Redis Context Propagation",id:"\ufe0f-redis-context-propagation",level:2},{value:"\ud83c\udfd7\ufe0f Singleton Pattern",id:"\ufe0f-singleton-pattern",level:2},{value:"\ud83c\udfaf Context Data Types",id:"-context-data-types",level:2},{value:"\ud83d\udd04 Context Lifecycle",id:"-context-lifecycle",level:2},{value:"Request Context",id:"request-context",level:3},{value:"Background Operations",id:"background-operations",level:3},{value:"\ud83e\udde0 Smart Context Logging with LoggingMatrix",id:"-smart-context-logging-with-loggingmatrix",level:2},{value:"How LoggingMatrix Works",id:"how-loggingmatrix-works",level:3},{value:"Key Features",id:"key-features",level:3},{value:"Examples",id:"examples",level:3},{value:"Runtime Configuration",id:"runtime-configuration",level:3},{value:"\ud83d\udd27 Configuration Options",id:"-configuration-options",level:2},{value:"\ud83c\udfaf Best Practices",id:"-best-practices",level:2},{value:"\ud83d\udd0d Debugging Context",id:"-debugging-context",level:2},{value:"\u26a1 Performance Considerations",id:"-performance-considerations",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"context-management",children:"Context Management"})}),"\n",(0,r.jsx)(n.p,{children:"SyntropyLog's context management system provides automatic correlation and context propagation across your entire application."}),"\n",(0,r.jsx)(n.h2,{id:"-overview",children:"\ud83c\udfaf Overview"}),"\n",(0,r.jsx)(n.p,{children:"The context system enables:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Automatic correlation"})," - Single ID connects all operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Context propagation"})," - Data flows through HTTP calls, message brokers, and Redis"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Framework agnostic"})," - Works with any Node.js application"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Zero boilerplate"})," - No manual context passing required"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-basic-usage",children:"\ud83d\ude80 Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { syntropyLog } from 'syntropylog';\n\n// Initialize with context configuration\nawait syntropyLog.init({\n  context: {\n    correlationIdHeader: 'X-Correlation-ID',\n  },\n});\n\n// Get context manager\nconst contextManager = syntropyLog.getContextManager();\n\n// Set context data\ncontextManager.set('userId', 123);\ncontextManager.set('requestId', 'req-456');\ncontextManager.set('sessionId', 'sess-789');\n\n// Context is automatically included in all logs\nconst logger = syntropyLog.getLogger();\nlogger.info('User authenticated successfully');\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-automatic-correlation",children:"\ud83d\udd17 Automatic Correlation"}),"\n",(0,r.jsx)(n.p,{children:"SyntropyLog automatically generates and propagates correlation IDs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Correlation ID is automatically generated for each request\nconst correlationId = contextManager.getCorrelationId();\n\n// All subsequent operations use the same correlation ID\nlogger.info('Processing user request');\nawait httpClient.get('/api/users');\nawait redis.set('user:123', userData);\nawait broker.publish('user.updated', event);\n\n// All logs and operations share the same correlation ID\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-http-context-propagation",children:"\ud83c\udf10 HTTP Context Propagation"}),"\n",(0,r.jsx)(n.p,{children:"Context automatically propagates through HTTP calls:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Configure HTTP client with context propagation\nawait syntropyLog.init({\n  http: {\n    instances: [\n      {\n        instanceName: 'api',\n        adapter: new AxiosAdapter(axios.create()),\n        propagate: ['correlationId', 'userId', 'tenantId'],\n      },\n    ],\n  },\n});\n\n// Context is automatically added to HTTP headers\nconst httpClient = syntropyLog.getHttp('api');\nawait httpClient.request({\n  method: 'GET',\n  url: '/api/users',\n  // Headers automatically include:\n  // X-Correlation-ID: abc-123-def-456\n  // X-User-ID: 123\n  // X-Tenant-ID: tenant-1\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-message-broker-context-propagation",children:"\ud83d\udce1 Message Broker Context Propagation"}),"\n",(0,r.jsx)(n.p,{children:"Context flows through message brokers:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Configure broker with context propagation\nawait syntropyLog.init({\n  brokers: {\n    instances: [\n      {\n        instanceName: 'events',\n        adapter: new KafkaAdapter(kafkaConfig),\n        propagate: ['correlationId', 'userId', 'eventType'],\n      },\n    ],\n  },\n});\n\n// Context is automatically included in messages\nconst broker = syntropyLog.getBroker('events');\nawait broker.publish('user.created', {\n  userId: 123,\n  email: 'user@example.com',\n  // Message automatically includes correlation ID and context\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-redis-context-propagation",children:"\ud83d\uddc4\ufe0f Redis Context Propagation"}),"\n",(0,r.jsx)(n.p,{children:"Context is included in Redis operations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Configure Redis with context logging\nawait syntropyLog.init({\n  redis: {\n    instances: [\n      {\n        instanceName: 'cache',\n        url: 'redis://localhost:6379',\n        logging: {\n          onSuccess: 'debug',\n          onError: 'error',\n          logCommandValues: true,\n        },\n      },\n    ],\n  },\n});\n\n// Context is automatically logged with Redis operations\nconst redis = syntropyLog.getRedis('cache');\nawait redis.set('user:123', userData);\n// Log includes correlation ID and context\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-singleton-pattern",children:"\ud83c\udfd7\ufe0f Singleton Pattern"}),"\n",(0,r.jsx)(n.p,{children:"Context manager uses singleton pattern for consistency:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// First call - creates and returns new instance\nconst context1 = syntropyLog.getContextManager();\n\n// Second call - returns the SAME instance (singleton)\nconst context2 = syntropyLog.getContextManager();\n\n// context1 === context2 \u2705\n// All context data is shared\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-context-data-types",children:"\ud83c\udfaf Context Data Types"}),"\n",(0,r.jsx)(n.p,{children:"SyntropyLog supports various context data types:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const contextManager = syntropyLog.getContextManager();\n\n// String values\ncontextManager.set('requestId', 'req-123');\n\n// Number values\ncontextManager.set('userId', 123);\n\n// Boolean values\ncontextManager.set('isAuthenticated', true);\n\n// Object values\ncontextManager.set('user', {\n  id: 123,\n  email: 'user@example.com',\n  role: 'admin',\n});\n\n// Array values\ncontextManager.set('permissions', ['read', 'write', 'delete']);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-context-lifecycle",children:"\ud83d\udd04 Context Lifecycle"}),"\n",(0,r.jsx)(n.h3,{id:"request-context",children:"Request Context"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Context is automatically created for each request\napp.use((req, res, next) => {\n  // SyntropyLog automatically generates correlation ID\n  // and sets up context for this request\n  \n  // Add request-specific data\n  contextManager.set('userId', req.user?.id);\n  contextManager.set('ip', req.ip);\n  contextManager.set('userAgent', req.get('User-Agent'));\n  \n  next();\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"background-operations",children:"Background Operations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Context persists across async operations\nsetTimeout(() => {\n  // Same correlation ID and context\n  logger.info('Background operation completed');\n}, 1000);\n\n// Context works with promises\nPromise.resolve().then(() => {\n  // Context is still available\n  logger.info('Promise resolved');\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-smart-context-logging-with-loggingmatrix",children:"\ud83e\udde0 Smart Context Logging with LoggingMatrix"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"loggingMatrix"})," is an intermediary layer that controls what context data gets passed to the logger. It acts as a filter that determines which context fields are included in each log level, without affecting the security pipeline or data masking."]}),"\n",(0,r.jsx)(n.h3,{id:"how-loggingmatrix-works",children:"How LoggingMatrix Works"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"await syntropyLog.init({\n  loggingMatrix: {\n    default: ['correlationId'], // Minimal context for success logs\n    trace: ['*'], // Full context for debugging\n    debug: ['correlationId', 'userId', 'operation'],\n    info: ['correlationId', 'serviceName'],\n    warn: ['correlationId', 'userId', 'errorCode'],\n    error: ['*'], // Full context when things go wrong\n    fatal: ['*'], // Everything for critical failures\n  },\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Selective Context"}),": Only specified context fields are included in logs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wildcard Support"}),": Use ",(0,r.jsx)(n.code,{children:"'*'"})," to include ALL context fields"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hot Reload"}),": Can be modified at runtime without restarting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Security Preserved"}),": All masking and sanitization rules still apply"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Optimized"}),": Only serializes what's needed"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Set context data\nconst contextManager = syntropyLog.getContextManager();\ncontextManager.set('userId', 123);\ncontextManager.set('serviceName', 'user-service');\ncontextManager.set('operation', 'create-user');\ncontextManager.set('tenantId', 'tenant-1');\ncontextManager.set('sessionId', 'sess-789');\n\n// With loggingMatrix: { info: ['correlationId', 'serviceName'] }\nlogger.info('User created successfully');\n// Log output: { correlationId: 'abc-123', serviceName: 'user-service', message: 'User created successfully' }\n// Note: userId, operation, tenantId, sessionId are NOT included\n\n// With loggingMatrix: { error: ['*'] }\nlogger.error('Database connection failed');\n// Log output: { correlationId: 'abc-123', userId: 123, serviceName: 'user-service', operation: 'create-user', tenantId: 'tenant-1', sessionId: 'sess-789', message: 'Database connection failed' }\n// Note: ALL context fields are included\n"})}),"\n",(0,r.jsx)(n.h3,{id:"runtime-configuration",children:"Runtime Configuration"}),"\n",(0,r.jsx)(n.p,{children:"You can modify the loggingMatrix at runtime:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Change logging matrix dynamically\nsyntropyLog.updateLoggingMatrix({\n  info: ['correlationId', 'serviceName', 'userId'], // Add userId to info logs\n  error: ['correlationId', 'userId', 'errorCode'], // Reduce error context\n});\n\n// The changes take effect immediately\nlogger.info('Operation completed'); // Now includes userId\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-configuration-options",children:"\ud83d\udd27 Configuration Options"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"await syntropyLog.init({\n  context: {\n    correlationIdHeader: 'X-Correlation-ID',\n    transactionIdHeader: 'X-Trace-ID',\n    enableCorrelation: true,\n    correlationIdGenerator: () => `req-${Date.now()}-${Math.random()}`,\n    defaultContext: {\n      serviceName: 'my-app',\n      environment: 'production',\n    },\n  },\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-best-practices",children:"\ud83c\udfaf Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Set context early"})," - Initialize context at the beginning of each request"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use meaningful names"})," - Choose descriptive context keys"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Keep context minimal"})," - Only include relevant data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Avoid sensitive data"})," - Don't put passwords or tokens in context"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use correlation IDs"})," - Always enable correlation for distributed tracing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clean up context"})," - Context is automatically cleaned up per request"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-debugging-context",children:"\ud83d\udd0d Debugging Context"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Get all current context\nconst allContext = contextManager.getAll();\nconsole.log('Current context:', allContext);\n\n// Get specific context value\nconst userId = contextManager.get('userId');\n\n// Check if context exists\nconst hasUserId = contextManager.has('userId');\n\n// Remove specific context\ncontextManager.remove('userId');\n\n// Clear all context\ncontextManager.clear();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-performance-considerations",children:"\u26a1 Performance Considerations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Minimal overhead"})," - Context operations are optimized"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory efficient"})," - Context is cleaned up automatically"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fast propagation"})," - Context flows through all operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Singleton pattern"})," - Prevents memory leaks"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var o=t(6540);const r={},a=o.createContext(r);function s(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);