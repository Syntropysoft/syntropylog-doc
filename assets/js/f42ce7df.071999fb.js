"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[494],{3682:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"examples/testing-serializers","title":"Testing Serializers","description":"Testing custom serialization logic with MockSerializerRegistry","source":"@site/docs/examples/31-testing-serializers.md","sourceDirName":"examples","slug":"/examples/testing-serializers","permalink":"/syntropylog-doc/docs/examples/testing-serializers","draft":false,"unlisted":false,"editUrl":"https://github.com/Syntropysoft/SyntropyLog/tree/main/docs-docusaurus/docs/examples/31-testing-serializers.md","tags":[],"version":"current","sidebarPosition":31,"frontMatter":{"id":"testing-serializers","title":"Testing Serializers","sidebar_label":"Testing Serializers","description":"Testing custom serialization logic with MockSerializerRegistry"},"sidebar":"tutorialSidebar","previous":{"title":"Advanced Testing","permalink":"/syntropylog-doc/docs/examples/advanced-testing"},"next":{"title":"Testing Transport Concepts","permalink":"/syntropylog-doc/docs/examples/testing-transports-concepts"}}');var t=r(4848),i=r(8453);const o={id:"testing-serializers",title:"Testing Serializers",sidebar_label:"Testing Serializers",description:"Testing custom serialization logic with MockSerializerRegistry"},l="Testing Serializers",a={},c=[{value:"Overview",id:"overview",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"<strong>MockSerializerRegistry</strong>",id:"mockserializerregistry",level:3},{value:"<strong>Framework Agnostic Testing</strong>",id:"framework-agnostic-testing",level:3},{value:"<strong>Spy Function Injection</strong>",id:"spy-function-injection",level:3},{value:"Example Code",id:"example-code",level:2},{value:"<strong>Custom Serializers</strong>",id:"custom-serializers",level:3},{value:"<strong>Testing Serializers</strong>",id:"testing-serializers-1",level:3},{value:"<strong>Framework Boilerplate Testing</strong>",id:"framework-boilerplate-testing",level:3},{value:"Test Coverage",id:"test-coverage",level:2},{value:"Key Takeaways",id:"key-takeaways",level:2},{value:"<strong>1. Framework Agnostic Mocks</strong>",id:"1-framework-agnostic-mocks",level:3},{value:"<strong>2. High Test Coverage</strong>",id:"2-high-test-coverage",level:3},{value:"<strong>3. Declarative Testing</strong>",id:"3-declarative-testing",level:3},{value:"<strong>4. Zero External Dependencies</strong>",id:"4-zero-external-dependencies",level:3},{value:"<strong>5. Silent Observer Philosophy</strong>",id:"5-silent-observer-philosophy",level:3},{value:"Related Examples",id:"related-examples",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"testing-serializers",children:"Testing Serializers"})}),"\n",(0,t.jsxs)(s.p,{children:["This example demonstrates how to test custom serialization logic using ",(0,t.jsx)(s.code,{children:"MockSerializerRegistry"})," and framework-agnostic testing patterns."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"\ud83d\udce6 Version"}),": This example corresponds to ",(0,t.jsx)(s.strong,{children:"SyntropyLog v0.7.0"})]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(s.p,{children:"Serializers are functions that transform complex objects into strings for logging. This example shows how to:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Test custom serializer functions in isolation"}),"\n",(0,t.jsxs)(s.li,{children:["Use ",(0,t.jsx)(s.code,{children:"MockSerializerRegistry"})," for testing"]}),"\n",(0,t.jsx)(s.li,{children:"Achieve high test coverage with framework-agnostic patterns"}),"\n",(0,t.jsx)(s.li,{children:"Test framework boilerplate functions"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,t.jsx)(s.h3,{id:"mockserializerregistry",children:(0,t.jsx)(s.strong,{children:"MockSerializerRegistry"})}),"\n",(0,t.jsxs)(s.p,{children:["A framework-agnostic mock that simulates the ",(0,t.jsx)(s.code,{children:"SerializerRegistry"})," behavior:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"import { MockSerializerRegistry } from 'syntropylog/testing';\n\n// Inject the testing framework's spy function\nconst mockRegistry = new MockSerializerRegistry(vi.fn);\n\n// Configure mock behavior\nmockRegistry.setSerializer('user', (user) => JSON.stringify(user));\nmockRegistry.setError('user', new Error('Serialization failed'));\nmockRegistry.setTimeout(100); // Simulate timeout\n"})}),"\n",(0,t.jsx)(s.h3,{id:"framework-agnostic-testing",children:(0,t.jsx)(s.strong,{children:"Framework Agnostic Testing"})}),"\n",(0,t.jsx)(s.p,{children:"The mock works with any testing framework:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"// Vitest\nconst mockRegistry = new MockSerializerRegistry(vi.fn);\n\n// Jest\nconst mockRegistry = new MockSerializerRegistry(jest.fn);\n\n// Jasmine\nconst mockRegistry = new MockSerializerRegistry(jasmine.createSpy);\n"})}),"\n",(0,t.jsx)(s.h3,{id:"spy-function-injection",children:(0,t.jsx)(s.strong,{children:"Spy Function Injection"})}),"\n",(0,t.jsx)(s.p,{children:"If you don't inject a spy function, you get a memorable error:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:'// \u274c This will throw: "SPY FUNCTION NOT INJECTED!"\nconst mockRegistry = new MockSerializerRegistry();\n\n// \u2705 This works perfectly\nconst mockRegistry = new MockSerializerRegistry(vi.fn);\n'})}),"\n",(0,t.jsx)(s.h2,{id:"example-code",children:"Example Code"}),"\n",(0,t.jsx)(s.h3,{id:"custom-serializers",children:(0,t.jsx)(s.strong,{children:"Custom Serializers"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"// src/serializers.ts\nexport function serializeUser(user: any): string {\n  return JSON.stringify({\n    id: user.id,\n    name: user.name,\n    email: user.email,\n    createdAt: user.createdAt?.toISOString()\n  });\n}\n\nexport function serializeOrder(order: any): string {\n  return JSON.stringify({\n    id: order.id,\n    userId: order.userId,\n    total: order.total,\n    status: order.status,\n    items: order.items?.length || 0\n  });\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"testing-serializers-1",children:(0,t.jsx)(s.strong,{children:"Testing Serializers"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"// tests/serializer-service.test.ts\nimport { describe, it, expect, beforeEach } from 'vitest';\nimport { MockSerializerRegistry } from 'syntropylog/testing';\nimport { serializeUser, serializeOrder } from '../src/serializers';\n\ndescribe('Serializer Service', () => {\n  let mockRegistry: MockSerializerRegistry;\n\n  beforeEach(() => {\n    mockRegistry = new MockSerializerRegistry(vi.fn);\n  });\n\n  it('should serialize user correctly', () => {\n    const user = {\n      id: 123,\n      name: 'John Doe',\n      email: 'john@example.com',\n      createdAt: new Date('2023-01-01')\n    };\n\n    mockRegistry.setSerializer('user', serializeUser);\n    const result = mockRegistry.process('user', user);\n\n    expect(result).toBe(JSON.stringify({\n      id: 123,\n      name: 'John Doe',\n      email: 'john@example.com',\n      createdAt: '2023-01-01T00:00:00.000Z'\n    }));\n  });\n\n  it('should handle multiple serializers', () => {\n    const user = { id: 1, name: 'John' };\n    const order = { id: 100, userId: 1, total: 99.99, status: 'pending' };\n\n    mockRegistry.setSerializer('user', serializeUser);\n    mockRegistry.setSerializer('order', serializeOrder);\n\n    const userResult = mockRegistry.process('user', user);\n    const orderResult = mockRegistry.process('order', order);\n\n    expect(userResult).toContain('\"name\":\"John\"');\n    expect(orderResult).toContain('\"total\":99.99');\n  });\n\n  it('should handle null and undefined values', () => {\n    mockRegistry.setSerializer('user', serializeUser);\n\n    const result1 = mockRegistry.process('user', null);\n    const result2 = mockRegistry.process('user', undefined);\n\n    expect(result1).toBe('null');\n    expect(result2).toBe('undefined');\n  });\n});\n"})}),"\n",(0,t.jsx)(s.h3,{id:"framework-boilerplate-testing",children:(0,t.jsx)(s.strong,{children:"Framework Boilerplate Testing"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"// tests/example-coverage.test.ts\nimport { describe, it, expect, beforeEach, afterEach } from 'vitest';\nimport { createTestHelper } from 'syntropylog/testing';\nimport { initializeSyntropyLog, gracefulShutdown } from '../src/index';\n\ndescribe('Framework Boilerplate', () => {\n  const testHelper = createTestHelper(vi.fn);\n\n  beforeEach(() => {\n    testHelper.beforeEach();\n  });\n\n  afterEach(() => {\n    testHelper.afterEach();\n  });\n\n  it('should initialize SyntropyLog correctly', async () => {\n    const result = await initializeSyntropyLog();\n    expect(result).toBeDefined();\n  });\n\n  it('should handle graceful shutdown', async () => {\n    const result = await gracefulShutdown();\n    expect(result).toBeDefined();\n  });\n});\n"})}),"\n",(0,t.jsx)(s.h2,{id:"test-coverage",children:"Test Coverage"}),"\n",(0,t.jsxs)(s.p,{children:["This example achieves ",(0,t.jsx)(s.strong,{children:"100% test coverage"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"Tests:       8 passed, 8 total\nSnapshots:   0 total\nTime:        1.5s\nRan all test suites.\n\n----------|---------|----------|---------|---------|-------------------\nFile      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n----------|---------|----------|---------|---------|-------------------\nAll files |     100 |      100 |     100 |     100 |                   \n----------|---------|----------|---------|---------|-------------------\n"})}),"\n",(0,t.jsx)(s.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,t.jsx)(s.h3,{id:"1-framework-agnostic-mocks",children:(0,t.jsx)(s.strong,{children:"1. Framework Agnostic Mocks"})}),"\n",(0,t.jsx)(s.p,{children:"All mocks work with any testing framework through spy function injection."}),"\n",(0,t.jsx)(s.h3,{id:"2-high-test-coverage",children:(0,t.jsx)(s.strong,{children:"2. High Test Coverage"})}),"\n",(0,t.jsx)(s.p,{children:"Achieve 100% coverage by testing both business logic and framework boilerplate."}),"\n",(0,t.jsx)(s.h3,{id:"3-declarative-testing",children:(0,t.jsx)(s.strong,{children:"3. Declarative Testing"})}),"\n",(0,t.jsx)(s.p,{children:"Tests focus on behavior and outcomes, not implementation details."}),"\n",(0,t.jsx)(s.h3,{id:"4-zero-external-dependencies",children:(0,t.jsx)(s.strong,{children:"4. Zero External Dependencies"})}),"\n",(0,t.jsx)(s.p,{children:"No Redis, HTTP servers, or external services needed for testing."}),"\n",(0,t.jsx)(s.h3,{id:"5-silent-observer-philosophy",children:(0,t.jsx)(s.strong,{children:"5. Silent Observer Philosophy"})}),"\n",(0,t.jsx)(s.p,{children:"Framework errors are reported but never interrupt the application flow."}),"\n",(0,t.jsx)(s.h2,{id:"related-examples",children:"Related Examples"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.a,{href:"./testing-patterns-vitest",children:"Example 28: Vitest Testing"})})," - Basic testing patterns"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.a,{href:"./testing-patterns-jest",children:"Example 29: Jest Testing"})})," - Jest-specific patterns"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.a,{href:"./testing-redis-context",children:"Example 30: Redis Context"})})," - Redis testing patterns"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.a,{href:"./testing-transports-concepts",children:"Example 32: Transport Concepts"})})," - Transport testing concepts"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Run the example"}),": ",(0,t.jsx)(s.code,{children:"cd 31-testing-serializers && npm test"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Explore the code"}),": Review the serializer functions and tests"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Apply to your project"}),": Use these patterns in your own serializer testing"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Extend the patterns"}),": Add more complex serialization scenarios"]}),"\n"]})]})}function g(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>o,x:()=>l});var n=r(6540);const t={},i=n.createContext(t);function o(e){const s=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);