"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[211],{8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var i=r(6540);const o={},s=i.createContext(o);function t(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(s.Provider,{value:n},e.children)}},8526:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>g,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-reference/api-reference","title":"API Reference","description":"Overview","source":"@site/docs/api-reference/index.md","sourceDirName":"api-reference","slug":"/api-reference/","permalink":"/syntropylog-doc/docs/api-reference/","draft":false,"unlisted":false,"editUrl":"https://github.com/Syntropysoft/SyntropyLog/tree/main/docs-docusaurus/docs/api-reference/index.md","tags":[],"version":"current","frontMatter":{"id":"api-reference","title":"API Reference","sidebar_label":"API Reference"},"sidebar":"tutorialSidebar","next":{"title":"Boilerplate - Critical API Reference","permalink":"/syntropylog-doc/docs/api-reference/boilerplate"}}');var o=r(4848),s=r(8453);const t={id:"api-reference",title:"API Reference",sidebar_label:"API Reference"},l="API Reference",a={},c=[{value:"Overview",id:"overview",level:2},{value:"\ud83d\udea8 Critical: Boilerplate (Required)",id:"-critical-boilerplate-required",level:2},{value:"Core Modules",id:"core-modules",level:2},{value:"Logger",id:"logger",level:3},{value:"Context Management",id:"context-management",level:3},{value:"HTTP Instrumentation",id:"http-instrumentation",level:3},{value:"Redis Integration",id:"redis-integration",level:3},{value:"Message Brokers",id:"message-brokers",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Basic Configuration",id:"basic-configuration",level:3},{value:"Advanced Configuration",id:"advanced-configuration",level:3},{value:"LoggingMatrix",id:"loggingmatrix",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Migration Guide",id:"migration-guide",level:2},{value:"From console.log",id:"from-consolelog",level:3},{value:"From winston",id:"from-winston",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Mode",id:"debug-mode",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"api-reference",children:"API Reference"})}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"SyntropyLog provides a comprehensive API for observability in Node.js applications. This reference covers all public APIs and their usage."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,o.jsx)(n.strong,{children:"CRITICAL"}),": Before using any API, you ",(0,o.jsx)(n.strong,{children:"MUST"})," implement the ",(0,o.jsx)(n.a,{href:"./boilerplate",children:"Boilerplate"})," for graceful shutdown. This is required for ALL applications (development and production)."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-critical-boilerplate-required",children:"\ud83d\udea8 Critical: Boilerplate (Required)"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Every application MUST include the boilerplate for graceful shutdown:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"./boilerplate",children:"Boilerplate API"})})," - Complete boilerplate with signal handling"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Graceful shutdown"})," - Ensures logs are flushed before application exit"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Signal handling"})," - Responds properly to Ctrl+C and Kubernetes termination"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Resource cleanup"})," - Closes connections and releases resources"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"This is not optional - it's a requirement for reliable applications."})}),"\n",(0,o.jsx)(n.h2,{id:"core-modules",children:"Core Modules"}),"\n",(0,o.jsx)(n.h3,{id:"logger",children:"Logger"}),"\n",(0,o.jsx)(n.p,{children:"The main logging interface for structured logging with context propagation."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { syntropyLog } from 'syntropylog';\n\n// Get logger instance\nconst logger = syntropyLog.getLogger();\n\n// Basic logging\nlogger.info('Application started', { userId: 123 });\nlogger.error('Database connection failed', { error: 'Connection timeout' });\n"})}),"\n",(0,o.jsx)(n.h3,{id:"context-management",children:"Context Management"}),"\n",(0,o.jsx)(n.p,{children:"Manage distributed tracing context across your application."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { syntropyLog } from 'syntropylog';\n\n// Set context\nsyntropyLog.setContext('userId', 123);\nsyntropyLog.setContext('requestId', 'req-456');\n\n// Get context\nconst context = syntropyLog.getContext();\n"})}),"\n",(0,o.jsx)(n.h3,{id:"http-instrumentation",children:"HTTP Instrumentation"}),"\n",(0,o.jsx)(n.p,{children:"Automatic HTTP request/response logging and correlation."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { syntropyLog } from 'syntropylog';\n\n// Get instrumented HTTP client\nconst httpClient = syntropyLog.getHttpClient();\n\n// Make requests with automatic logging\nconst response = await httpClient.get('https://api.example.com/users');\n"})}),"\n",(0,o.jsx)(n.h3,{id:"redis-integration",children:"Redis Integration"}),"\n",(0,o.jsx)(n.p,{children:"Distributed state management with Redis."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { syntropyLog } from 'syntropylog';\n\n// Get Redis instance\nconst redis = syntropyLog.getRedis();\n\n// Use Redis for state management\nawait redis.set('user:123:session', JSON.stringify(sessionData));\n"})}),"\n",(0,o.jsx)(n.h3,{id:"message-brokers",children:"Message Brokers"}),"\n",(0,o.jsx)(n.p,{children:"Integration with Kafka, RabbitMQ, and NATS."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { syntropyLog } from 'syntropylog';\n\n// Get broker instance\nconst broker = syntropyLog.getBroker();\n\n// Publish messages with correlation\nawait broker.publish('user.events', { userId: 123, action: 'login' });\n"})}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.h3,{id:"basic-configuration",children:"Basic Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { syntropyLog } from 'syntropylog';\n\nsyntropyLog.configure({\n  level: 'info',\n  transports: ['console', 'file'],\n  context: {\n    service: 'user-service',\n    version: '1.0.0'\n  }\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"syntropyLog.configure({\n  level: 'debug',\n  transports: {\n    console: {\n      format: 'pretty',\n      level: 'info'\n    },\n    file: {\n      path: './logs/app.log',\n      level: 'debug'\n    }\n  },\n  redis: {\n    host: 'localhost',\n    port: 6379\n  },\n  http: {\n    correlation: true,\n    masking: ['password', 'token']\n  }\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"loggingmatrix",children:"LoggingMatrix"}),"\n",(0,o.jsx)(n.p,{children:"Control which context fields are logged at each level."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"syntropyLog.setLoggingMatrix({\n  error: ['*'],           // Log all fields on error\n  warn: ['userId', 'requestId', 'service'],\n  info: ['userId', 'service'],\n  debug: ['requestId']     // Minimal context on debug\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"try {\n  // Your application code\n} catch (error) {\n  logger.error('Operation failed', {\n    error: error.message,\n    stack: error.stack,\n    context: syntropyLog.getContext()\n  });\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Always use structured logging"})," - Pass objects instead of string concatenation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Set context early"})," - Initialize context at the start of each request"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Use appropriate log levels"})," - Don't log everything at debug level"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Configure LoggingMatrix"})," - Control what context is logged at each level"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Handle errors gracefully"})," - Always catch and log errors with context"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,o.jsx)(n.h3,{id:"from-consolelog",children:"From console.log"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Before\nconsole.log('User logged in:', userId);\n\n// After\nlogger.info('User logged in', { userId });\n"})}),"\n",(0,o.jsx)(n.h3,{id:"from-winston",children:"From winston"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Before\nwinston.info('Request processed', { userId, duration });\n\n// After\nlogger.info('Request processed', { userId, duration });\n"})}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Context not propagating"})," - Ensure context is set before logging"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Redis connection errors"})," - Check Redis configuration and connectivity"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"HTTP correlation not working"})," - Verify HTTP adapter is properly configured"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Performance issues"})," - Review LoggingMatrix configuration"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,o.jsx)(n.p,{children:"Enable debug mode for detailed logging:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"syntropyLog.configure({\n  level: 'debug',\n  debug: true\n});\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.em,{children:["For more detailed examples, see the ",(0,o.jsx)(n.a,{href:"/examples",children:"Examples"})," section."]})})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);